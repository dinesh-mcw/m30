From d58469150b6950ef32989375302347fa77b13cd6 Mon Sep 17 00:00:00 2001
From: Clif Liu <clif.liu@lumotive.com>
Date: Fri, 28 Apr 2023 17:11:27 -0600
Subject: [PATCH 7/7] Add m30 camera driver

---
 arch/arm64/boot/dts/freescale/Makefile        |   3 +-
 .../boot/dts/freescale/imx8qm-mek-m30.dts     | 147 +++++
 arch/arm64/boot/dts/freescale/imx8qm-mek.dts  |  43 +-
 arch/arm64/configs/imx_v8_defconfig           |   7 +-
 drivers/media/i2c/Kconfig                     |  11 +
 drivers/media/i2c/Makefile                    |   1 +
 drivers/media/i2c/m30.c                       | 600 ++++++++++++++++++
 drivers/staging/media/imx/imx8-isi-cap.c      |   5 +-
 drivers/staging/media/imx/imx8-mipi-csi2.c    |  12 +-
 9 files changed, 800 insertions(+), 29 deletions(-)
 create mode 100644 arch/arm64/boot/dts/freescale/imx8qm-mek-m30.dts
 create mode 100644 drivers/media/i2c/m30.c

diff --git a/arch/arm64/boot/dts/freescale/Makefile b/arch/arm64/boot/dts/freescale/Makefile
index 84119ab61a5c..ac8aae5c4efd 100644
--- a/arch/arm64/boot/dts/freescale/Makefile
+++ b/arch/arm64/boot/dts/freescale/Makefile
@@ -170,7 +170,8 @@ dtb-$(CONFIG_ARCH_MXC) += imx8qm-mek.dtb imx8qm-mek-ov5640.dtb \
 			  imx8qm-mek-dsi-rm67191.dtb imx8qm-lpddr4-val-dp.dtb\
 			  imx8qp-lpddr4-val.dtb imx8dm-lpddr4-val.dtb imx8qm-pcieax2pciebx1.dtb \
 			  imx8qm-mek-cockpit-a53.dtb imx8qm-mek-cockpit-a72.dtb \
-			  imx8qm-mek-esai.dtb
+			  imx8qm-mek-esai.dtb \
+			  imx8qm-mek-m30.dtb
 dtb-$(CONFIG_ARCH_MXC) += imx8qxp-ai_ml.dtb
 dtb-$(CONFIG_ARCH_MXC) += imx8qxp-colibri-eval-v3.dtb
 dtb-$(CONFIG_ARCH_MXC) += imx8dxl-evk.dtb \
diff --git a/arch/arm64/boot/dts/freescale/imx8qm-mek-m30.dts b/arch/arm64/boot/dts/freescale/imx8qm-mek-m30.dts
new file mode 100644
index 000000000000..b1bd9eeeddfd
--- /dev/null
+++ b/arch/arm64/boot/dts/freescale/imx8qm-mek-m30.dts
@@ -0,0 +1,147 @@
+// SPDX-License-Identifier: GPL-2.0+
+// Copyright Lumotive 2023
+
+#include "imx8qm-mek.dts"
+
+&isi_0 {
+	status = "okay";
+
+	cap_device {
+		status = "okay";
+	};
+
+	m2m_device {
+		status = "okay";
+	};
+};
+
+&isi_1 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_2 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_3 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_4 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_5 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_6 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_7 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&mipi_csi_0 {
+	/delete-property/virtual-channel;
+
+	/* Camera 0  MIPI CSI-2 (CSIS0) */
+	port@0 {
+		reg = <0>;
+		mipi_csi0_ep: endpoint {
+			remote-endpoint = <&m30_mipi_0_ep>;
+			data-lanes = <1 2 3 4>;
+			bus-type = <4>;
+		};
+	};
+};
+
+&mipi_csi_1 {
+	status = "disabled";
+	/delete-property/virtual-channel;
+
+	/* Camera 1  MIPI CSI-2 (CSIS0) */
+	port@1 {
+		reg = <1>;
+		mipi_csi1_ep: endpoint {
+			remote-endpoint = <&m30_mipi_1_ep>;
+			data-lanes = <1 2 3 4>;
+			bus-type = <4>;
+		};
+	};
+};
+
+&i2c_mipi_csi0 {
+	m30_mipi_0: m30_mipi@3c {
+		compatible = "lumotive,m30";
+		reg = <0x3c>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_mipi_csi0>;
+		clocks = <&clk_dummy>;
+		clock-names = "xclk";
+		csi_id = <0>;
+		mipi_csi;
+		status = "okay";
+		port {
+			m30_mipi_0_ep: endpoint {
+				remote-endpoint = <&mipi_csi0_ep>;
+				data-lanes = <1 2 3 4>;
+				clocks-lanes = <0>;
+			};
+		};
+	};
+
+	/delete-node/max9286_mipi@6a;
+};
+
+&i2c_mipi_csi1 {
+	m30_mipi_1: m30_mipi@3c {
+		compatible = "lumotive,m30";
+		reg = <0x3c>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_mipi_csi1>;
+		clocks = <&clk_dummy>;
+		clock-names = "xclk";
+		csi_id = <1>;
+		mipi_csi;
+		status = "disabled";
+		port {
+			m30_mipi_1_ep: endpoint {
+				remote-endpoint = <&mipi_csi1_ep>;
+				data-lanes = <1 2 3 4>;
+				clocks-lanes = <0>;
+			};
+		};
+	};
+
+	/delete-node/max9286_mipi@6a;
+};
diff --git a/arch/arm64/boot/dts/freescale/imx8qm-mek.dts b/arch/arm64/boot/dts/freescale/imx8qm-mek.dts
index f65d705c5011..977f8c0fc148 100755
--- a/arch/arm64/boot/dts/freescale/imx8qm-mek.dts
+++ b/arch/arm64/boot/dts/freescale/imx8qm-mek.dts
@@ -1046,17 +1046,17 @@ &usbotg1 {
 };
 
 &usb3_phy {
-	status = "okay";
+	status = "disabled";
 };
 
 &usbotg3 {
-	status = "okay";
+	status = "disabled";
 };
 
 &usbotg3_cdns3 {
 	dr_mode = "otg";
 	usb-role-switch;
-	status = "okay";
+	status = "disabled";
 
 	port {
 		usb3_drd_sw: endpoint {
@@ -1094,10 +1094,10 @@ &usdhc2 {
 &i2c0 {
 	#address-cells = <1>;
 	#size-cells = <0>;
-	clock-frequency = <100000>;
+	clock-frequency = <100000>; // 1M for NCB
 	pinctrl-names = "default";
 	pinctrl-0 = <&pinctrl_i2c0>;
-	status = "disabled";
+	status = "okay";
 
 	isl29023@44 {
 		pinctrl-names = "default";
@@ -1107,18 +1107,21 @@ isl29023@44 {
 		rext = <499>;
 		interrupt-parent = <&lsio_gpio4>;
 		interrupts = <11 2>;
+		status = "disabled";
 	};
 
 	fxos8700@1e {
 		compatible = "nxp,fxos8700";
 		reg = <0x1e>;
 		interrupt-open-drain;
+		status = "disabled";
 	};
 
 	fxas21002c@20 {
 		compatible = "nxp,fxas21002c";
 		reg = <0x20>;
 		interrupt-open-drain;
+		status = "disabled";
 	};
 
 	max7322: gpio@68 {
@@ -1126,12 +1129,14 @@ max7322: gpio@68 {
 		reg = <0x68>;
 		gpio-controller;
 		#gpio-cells = <2>;
+		status = "okay"; // disable for NCB
 	};
 
 	mpl3115@60 {
 		compatible = "fsl,mpl3115";
 		reg = <0x60>;
 		interrupt-open-drain;
+		status = "disabled";
 	};
 
 	ptn5110: tcpc@51 {
@@ -1211,34 +1216,34 @@ m2m_device {
 };
 
 &isi_1 {
-	status = "okay";
+	status = "disabled";
 
 	cap_device {
-		status = "okay";
+		status = "disabled";
 	};
 };
 
 &isi_2 {
-	status = "okay";
+	status = "disabled";
 
 	cap_device {
-		status = "okay";
+		status = "disabled";
 	};
 };
 
 &isi_3 {
-	status = "okay";
+	status = "disabled";
 
 	cap_device {
-		status = "okay";
+		status = "disabled";
 	};
 };
 
 &isi_4 {
-	status = "okay";
+	status = "disabled";
 
 	cap_device {
-		status = "okay";
+		status = "disabled";
 	};
 };
 
@@ -1246,7 +1251,7 @@ &isi_5 {
 	status = "okay";
 
 	cap_device {
-		status = "okay";
+		status = "disabled";
 	};
 };
 
@@ -1254,15 +1259,15 @@ &isi_6 {
 	status = "okay";
 
 	cap_device {
-		status = "okay";
+		status = "disabled";
 	};
 };
 
 &isi_7 {
-	status = "okay";
+	status = "disabled";
 
 	cap_device {
-		status = "okay";
+		status = "disabled";
 	};
 };
 
@@ -1320,7 +1325,7 @@ &i2c_mipi_csi0 {
 	pinctrl-names = "default";
 	pinctrl-0 = <&pinctrl_i2c_mipi_csi0>;
 	clock-frequency = <100000>;
-	status = "disabled";
+	status = "okay";
 
 	max9286_mipi@6a {
 		compatible = "maxim,max9286_mipi";
@@ -1349,7 +1354,7 @@ &i2c_mipi_csi1 {
 	pinctrl-names = "default";
 	pinctrl-0 = <&pinctrl_i2c_mipi_csi1>;
 	clock-frequency = <100000>;
-	status = "disabled";
+	status = "okay";
 
 	max9286_mipi@6a {
 		compatible = "maxim,max9286_mipi";
diff --git a/arch/arm64/configs/imx_v8_defconfig b/arch/arm64/configs/imx_v8_defconfig
index c741556b43a9..a756f5370193 100644
--- a/arch/arm64/configs/imx_v8_defconfig
+++ b/arch/arm64/configs/imx_v8_defconfig
@@ -551,14 +551,15 @@ CONFIG_VIDEO_MX8_CAPTURE=y
 CONFIG_VIDEO_MXC_CSI_CAMERA=y
 CONFIG_MXC_MIPI_CSI=y
 CONFIG_DWC_MIPI_CSI2_HOST=y
-CONFIG_MXC_CAMERA_OV5640_MIPI_V2=y
+# CONFIG_MXC_CAMERA_OV5640_MIPI_V2 is not set
 CONFIG_V4L_MEM2MEM_DRIVERS=y
 CONFIG_VIDEO_IMX8_JPEG=m
 CONFIG_VIDEO_AMPHION_VPU=y
 CONFIG_SDR_PLATFORM_DRIVERS=y
 CONFIG_VIDEO_IMX219=m
-CONFIG_VIDEO_OV5640=y
-CONFIG_VIDEO_OV5645=m
+# CONFIG_VIDEO_OV5640 is not set
+# CONFIG_VIDEO_OV5645 is not set
+CONFIG_VIDEO_M30=y
 CONFIG_VIDEO_AP1302=y
 CONFIG_IMX_DPU_CORE=y
 CONFIG_IMX_LCDIF_CORE=y
diff --git a/drivers/media/i2c/Kconfig b/drivers/media/i2c/Kconfig
index 8d498b14b7d7..18da78839046 100644
--- a/drivers/media/i2c/Kconfig
+++ b/drivers/media/i2c/Kconfig
@@ -1401,6 +1401,17 @@ config VIDEO_S5C73M3
 	  This is a V4L2 sensor driver for Samsung S5C73M3
 	  8 Mpixel camera.
 
+config VIDEO_M30
+	tristate "Lumotive M30 sensor support"
+	depends on OF
+	depends on GPIOLIB && VIDEO_V4L2 && I2C
+	select MEDIA_CONTROLLER
+	select VIDEO_V4L2_SUBDEV_API
+	select V4L2_FWNODE
+	help
+	  This is a Video4Linux2 sensor driver for the Lumotive
+	  M30 camera sensor with a MIPI CSI-2 interface.
+
 endmenu
 
 menu "Lens drivers"
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index d6675221f466..f1886417a8c6 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -135,3 +135,4 @@ obj-$(CONFIG_VIDEO_RDACM21)	+= rdacm21.o
 obj-$(CONFIG_VIDEO_ST_MIPID02) += st-mipid02.o
 obj-$(CONFIG_SDR_MAX2175) += max2175.o
 obj-$(CONFIG_VIDEO_AP1302)     += ap1302.o
+obj-$(CONFIG_VIDEO_M30) += m30.o
diff --git a/drivers/media/i2c/m30.c b/drivers/media/i2c/m30.c
new file mode 100644
index 000000000000..b3bebfc95787
--- /dev/null
+++ b/drivers/media/i2c/m30.c
@@ -0,0 +1,600 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright (C) 2011-2013 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2014-2017 Mentor Graphics Inc.
+ */
+
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include <linux/clkdev.h>
+#include <linux/ctype.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/regulator/consumer.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <media/v4l2-async.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-event.h>
+#include <media/v4l2-fwnode.h>
+#include <media/v4l2-subdev.h>
+
+#define M30_DEFAULT_MEDIA_BUS_FMT_CODE 	MEDIA_BUS_FMT_BGR888_1X24
+#define M30_DEFAULT_MODE		M30_MODE_FF_RGB888
+#define M30_DPHY_CLK_RATE_MHZ		1200	
+
+enum m30_mode_id {
+	M30_MODE_FF_RGB888,
+	M30_MODE_ROI_20_RGB888,
+	M30_MODE_ROI_20_TA_RGB888,
+	M30_MODE_ROI_20_AG_RGB888,
+	M30_MODE_ROI_8_RGB888,
+	M30_MODE_ROI_8_TA_RGB888,
+	M30_MODE_ROI_8_AG_RGB888,
+	M30_MODE_ROI_6_RGB888,
+	M30_MODE_ROI_6_TA_RGB888,
+	M30_MODE_ROI_6_AG_RGB888,
+	M30_NUM_MODES,
+};
+
+enum m30_frame_rate {
+	M30_FRAME_RATE_FF = 0,
+	M30_FRAME_RATE_ROI_20,
+	M30_FRAME_RATE_ROI_8,
+	M30_FRAME_RATE_ROI_6,
+	M30_FRAME_RATE_ROI_20_AG,
+	M30_FRAME_RATE_ROI_8_AG,
+	M30_FRAME_RATE_ROI_6_AG,
+	M30_NUM_FRAME_RATES,
+};
+
+u32 m30_frame_rates[M30_NUM_FRAME_RATES] = {
+	10,
+	637,
+	819,
+	910,
+	64,
+	82,
+	91,
+};
+
+struct m30_mode_info {
+	enum m30_mode_id id;
+	u32 width;
+	u32 height;
+	enum m30_frame_rate fps;
+};
+
+struct m30_dev {
+	struct i2c_client *i2c_client;
+	struct v4l2_subdev sd;
+	struct media_pad pad;
+	struct v4l2_fwnode_endpoint ep; /* the parsed DT endpoint info */
+
+	/* lock to protect all members below */
+	struct mutex lock;
+
+	int power_count;
+
+	struct v4l2_mbus_framefmt fmt;
+	bool pending_fmt_change;
+
+	const struct m30_mode_info *current_mode;
+	const struct m30_mode_info *last_mode;
+	enum m30_frame_rate current_fr;
+	struct v4l2_fract frame_interval;
+
+	bool pending_mode_change;
+	bool streaming;
+};
+
+static inline struct m30_dev *to_m30_dev(struct v4l2_subdev *sd)
+{
+	return container_of(sd, struct m30_dev, sd);
+}
+
+static const struct m30_mode_info
+m30_mode_data[M30_NUM_MODES] = {
+	{ M30_MODE_FF_RGB888,        1280, 2881, M30_FRAME_RATE_FF        },
+	{ M30_MODE_ROI_20_RGB888,    1280,  121, M30_FRAME_RATE_ROI_20    },
+	{ M30_MODE_ROI_20_TA_RGB888, 1280,   41, M30_FRAME_RATE_ROI_20    },
+	{ M30_MODE_ROI_20_AG_RGB888, 1280,  410, M30_FRAME_RATE_ROI_20_AG },
+	{ M30_MODE_ROI_8_RGB888,     1280,   49, M30_FRAME_RATE_ROI_8     },
+	{ M30_MODE_ROI_8_TA_RGB888,  1280,   17, M30_FRAME_RATE_ROI_8     },
+	{ M30_MODE_ROI_8_AG_RGB888,  1280,  170, M30_FRAME_RATE_ROI_8_AG  },
+	{ M30_MODE_ROI_6_RGB888,     1280,   37, M30_FRAME_RATE_ROI_6     },
+	{ M30_MODE_ROI_6_TA_RGB888,  1280,   13, M30_FRAME_RATE_ROI_6     },
+	{ M30_MODE_ROI_6_AG_RGB888,  1280,  130, M30_FRAME_RATE_ROI_6_AG  },
+};
+
+static int m30_check_valid_mode(struct m30_dev *sensor,
+				const struct m30_mode_info *mode,
+				enum m30_frame_rate rate)
+{
+	struct i2c_client *client = sensor->i2c_client;
+	if (mode->id < 0 || mode->id >= M30_NUM_MODES) {
+		dev_err(&client->dev, "Invalid mode (%d)\n", mode->id);
+	}
+	return mode->fps == rate ? 0 : -EINVAL;
+}
+
+static const struct m30_mode_info *
+m30_find_mode(struct m30_dev *sensor, int wid, int hgt, bool nearest)
+{
+	const struct m30_mode_info *mode;
+
+	mode = v4l2_find_nearest_size(m30_mode_data,
+				      ARRAY_SIZE(m30_mode_data),
+				      width, height,
+				      wid, hgt);
+
+	if (!mode ||
+	    (!nearest && (mode->width != wid || mode->height != hgt))) {
+		return NULL;
+	}
+
+	return mode;
+}
+
+static int m30_set_mode(struct m30_dev *sensor)
+{
+	const struct m30_mode_info *mode = sensor->current_mode;
+
+	sensor->pending_mode_change = false;
+	sensor->last_mode = mode;
+
+	return 0;
+}
+
+/* --------------- Subdev Operations --------------- */
+
+static int m30_s_power(struct v4l2_subdev *sd, int on)
+{
+	struct m30_dev *sensor = to_m30_dev(sd);
+	int ret = 0;
+
+	printk("%s\n", __func__);
+	mutex_lock(&sensor->lock);
+
+	/* Update the power count. */
+	sensor->power_count += on ? 1 : -1;
+	WARN_ON(sensor->power_count < 0);
+
+	mutex_unlock(&sensor->lock);
+
+	return ret;
+}
+
+static int m30_try_frame_interval(struct m30_dev *sensor,
+				     struct v4l2_fract *fi,
+				     u32 width, u32 height)
+{
+	const struct m30_mode_info *mode;
+
+	printk("%s\n", __func__);
+	mode = m30_find_mode(sensor, width, height, false);
+
+	if (mode) {
+		fi->numerator = 1;
+		fi->denominator = m30_frame_rates[mode->fps];
+		return mode->fps;
+	}
+	return -EINVAL;
+}
+
+static int m30_get_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_state *sd_state,
+			  struct v4l2_subdev_format *format)
+{
+	struct m30_dev *sensor = to_m30_dev(sd);
+	struct v4l2_mbus_framefmt *fmt;
+
+	printk("%s\n", __func__);
+	if (format->pad != 0)
+		return -EINVAL;
+
+	mutex_lock(&sensor->lock);
+
+	if (format->which == V4L2_SUBDEV_FORMAT_TRY)
+		fmt = v4l2_subdev_get_try_format(&sensor->sd, sd_state,
+						 format->pad);
+	else
+		fmt = &sensor->fmt;
+
+	fmt->reserved[0] = M30_DPHY_CLK_RATE_MHZ; // flag to the MIPI driver to calculate HS_SETTLE
+	format->format = *fmt;
+
+	mutex_unlock(&sensor->lock);
+	return 0;
+}
+
+static int m30_try_fmt_internal(struct v4l2_subdev *sd,
+				struct v4l2_mbus_framefmt *fmt,
+				enum m30_frame_rate fr,
+				const struct m30_mode_info **new_mode)
+{
+	struct m30_dev *sensor = to_m30_dev(sd);
+	const struct m30_mode_info *mode;
+
+	printk("%s\n", __func__);
+	mode = m30_find_mode(sensor, fmt->width, fmt->height, true);
+	if (!mode)
+		return -EINVAL;
+	fmt->width = mode->width;
+	fmt->height = mode->height;
+	memset(fmt->reserved, 0, sizeof(fmt->reserved));
+
+	if (new_mode)
+		*new_mode = mode;
+
+	fmt->code = M30_DEFAULT_MEDIA_BUS_FMT_CODE;
+	fmt->colorspace = V4L2_COLORSPACE_SRGB;
+	fmt->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(fmt->colorspace);
+	fmt->quantization = V4L2_QUANTIZATION_FULL_RANGE;
+	fmt->xfer_func = V4L2_MAP_XFER_FUNC_DEFAULT(fmt->colorspace);
+
+	return 0;
+}
+
+static int m30_set_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_state *sd_state,
+			  struct v4l2_subdev_format *format)
+{
+	struct m30_dev *sensor = to_m30_dev(sd);
+	const struct m30_mode_info *new_mode;
+	struct v4l2_mbus_framefmt *mbus_fmt = &format->format;
+	int ret;
+
+	printk("%s\n", __func__);
+	if (format->pad != 0)
+		return -EINVAL;
+
+	mutex_lock(&sensor->lock);
+
+	if (sensor->streaming) {
+		ret = -EBUSY;
+		goto out;
+	}
+
+	ret = m30_try_fmt_internal(sd, mbus_fmt,
+				   sensor->current_fr, &new_mode);
+	if (ret)
+		goto out;
+
+	if (format->which == V4L2_SUBDEV_FORMAT_TRY) {
+		*v4l2_subdev_get_try_format(sd, sd_state, 0) = *mbus_fmt;
+		goto out;
+	}
+
+	if (new_mode != sensor->current_mode) {
+		sensor->current_mode = new_mode;
+		sensor->pending_mode_change = true;
+	}
+	if (mbus_fmt->code != sensor->fmt.code)
+		sensor->pending_fmt_change = true;
+
+	/* update format even if code is unchanged, resolution might change */
+	sensor->fmt = *mbus_fmt;
+
+	if (sensor->pending_mode_change || sensor->pending_fmt_change)
+		sensor->fmt = *mbus_fmt;
+out:
+	mutex_unlock(&sensor->lock);
+	return ret;
+}
+
+static int m30_enum_frame_size(struct v4l2_subdev *sd,
+			       struct v4l2_subdev_state *sd_state,
+			       struct v4l2_subdev_frame_size_enum *fse)
+{
+	if (fse->pad != 0)
+		return -EINVAL;
+	if (fse->index >= M30_NUM_MODES)
+		return -EINVAL;
+
+	fse->min_width =
+		m30_mode_data[fse->index].width;
+	fse->max_width = fse->min_width;
+	fse->min_height =
+		m30_mode_data[fse->index].height;
+	fse->max_height = fse->min_height;
+
+	return 0;
+}
+
+static int m30_enum_frame_interval(
+	struct v4l2_subdev *sd,
+	struct v4l2_subdev_state *sd_state,
+	struct v4l2_subdev_frame_interval_enum *fie)
+{
+	int i;
+
+	if (fie->pad != 0)
+		return -EINVAL;
+	if (fie->index >= 1) // only one frame rate per resolution
+		return -EINVAL;
+
+	if (fie->width == 0 || fie->height == 0 || fie->code == 0) {
+		pr_warn("Please assign pixel format, width and height.\n");
+		return -EINVAL;
+	}
+
+	fie->interval.numerator = 1;
+
+	for (i = 0; i < M30_NUM_MODES; i++) {
+		if (fie->width  == m30_mode_data[i].width &&
+		    fie->height == m30_mode_data[i].height) {
+			fie->interval.denominator = m30_frame_rates[m30_mode_data[i].fps];
+			return 0;
+		}
+	}
+
+	return -EINVAL;
+}
+
+static int m30_g_frame_interval(struct v4l2_subdev *sd,
+				struct v4l2_subdev_frame_interval *fi)
+{
+	struct m30_dev *sensor = to_m30_dev(sd);
+
+	printk("%s\n", __func__);
+	mutex_lock(&sensor->lock);
+	fi->interval = sensor->frame_interval;
+	mutex_unlock(&sensor->lock);
+
+	return 0;
+}
+
+static int m30_s_frame_interval(struct v4l2_subdev *sd,
+				struct v4l2_subdev_frame_interval *fi)
+{
+	struct m30_dev *sensor = to_m30_dev(sd);
+	const struct m30_mode_info *mode;
+	int frame_rate, ret = 0;
+
+	printk("%s\n", __func__);
+	if (fi->pad != 0)
+		return -EINVAL;
+
+	mutex_lock(&sensor->lock);
+
+	if (sensor->streaming) {
+		ret = -EBUSY;
+		goto out;
+	}
+
+	mode = sensor->current_mode;
+
+	frame_rate = m30_try_frame_interval(sensor, &fi->interval,
+					       mode->width, mode->height);
+	if (frame_rate < 0) {
+		/* Always return a valid frame interval value */
+		fi->interval = sensor->frame_interval;
+		goto out;
+	}
+
+	mode = m30_find_mode(sensor, mode->width,
+				mode->height, true);
+	if (!mode) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	if (mode != sensor->current_mode ||
+	    frame_rate != sensor->current_fr) {
+		sensor->current_fr = frame_rate;
+		sensor->frame_interval = fi->interval;
+		sensor->current_mode = mode;
+		sensor->pending_mode_change = true;
+	}
+out:
+	mutex_unlock(&sensor->lock);
+	return ret;
+}
+
+static int m30_enum_mbus_code(struct v4l2_subdev *sd,
+			      struct v4l2_subdev_state *sd_state,
+			      struct v4l2_subdev_mbus_code_enum *code)
+{
+	printk("%s\n", __func__);
+	if (code->pad != 0)
+		return -EINVAL;
+	if (code->index > 0)
+		return -EINVAL;
+
+	code->code = M30_DEFAULT_MEDIA_BUS_FMT_CODE;
+	return 0;
+}
+
+static int m30_s_stream(struct v4l2_subdev *sd, int enable)
+{
+	struct m30_dev *sensor = to_m30_dev(sd);
+	struct i2c_client *client = sensor->i2c_client;
+	int ret = 0;
+	printk("%s\n", __func__);
+
+	mutex_lock(&sensor->lock);
+
+	if (sensor->streaming == !enable) {
+		ret = m30_check_valid_mode(sensor,
+					   sensor->current_mode,
+					   sensor->current_fr);
+		if (ret) {
+			dev_err(&client->dev, "Not support WxH@fps=%dx%d@%d\n",
+				sensor->current_mode->width,
+				sensor->current_mode->height,
+				m30_frame_rates[sensor->current_fr]);
+			goto out;
+		}
+
+		if (enable && sensor->pending_mode_change) {
+			ret = m30_set_mode(sensor);
+			if (ret)
+				goto out;
+		}
+	}
+out:
+	mutex_unlock(&sensor->lock);
+	return ret;
+}
+
+static const struct v4l2_subdev_core_ops m30_core_ops = {
+	.s_power = m30_s_power,
+	.log_status = v4l2_ctrl_subdev_log_status,
+	.subscribe_event = v4l2_ctrl_subdev_subscribe_event,
+	.unsubscribe_event = v4l2_event_subdev_unsubscribe,
+};
+
+static const struct v4l2_subdev_video_ops m30_video_ops = {
+	.g_frame_interval = m30_g_frame_interval,
+	.s_frame_interval = m30_s_frame_interval,
+	.s_stream = m30_s_stream,
+};
+
+static const struct v4l2_subdev_pad_ops m30_pad_ops = {
+	.enum_mbus_code = m30_enum_mbus_code,
+	.get_fmt = m30_get_fmt,
+	.set_fmt = m30_set_fmt,
+	.enum_frame_size = m30_enum_frame_size,
+	.enum_frame_interval = m30_enum_frame_interval,
+};
+
+static const struct v4l2_subdev_ops m30_subdev_ops = {
+	.core = &m30_core_ops,
+	.video = &m30_video_ops,
+	.pad = &m30_pad_ops,
+};
+
+static int m30_link_setup(struct media_entity *entity,
+			   const struct media_pad *local,
+			   const struct media_pad *remote, u32 flags)
+{
+	return 0;
+}
+
+static const struct media_entity_operations m30_sd_media_ops = {
+	.link_setup = m30_link_setup,
+};
+
+static int m30_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct fwnode_handle *endpoint;
+	struct m30_dev *sensor;
+	struct v4l2_mbus_framefmt *fmt;
+	int ret;
+
+	printk("%s\n", __func__);
+	sensor = devm_kzalloc(dev, sizeof(*sensor), GFP_KERNEL);
+	if (!sensor)
+		return -ENOMEM;
+
+	sensor->i2c_client = client;
+
+	/*
+	 * default init sequence initialize sensor to
+	 * RGB888 1280 x 2881 lines
+	 */
+	fmt = &sensor->fmt;
+	fmt->code = M30_DEFAULT_MEDIA_BUS_FMT_CODE;
+	fmt->colorspace = V4L2_COLORSPACE_SRGB;
+	fmt->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(fmt->colorspace);
+	fmt->quantization = V4L2_QUANTIZATION_FULL_RANGE;
+	fmt->xfer_func = V4L2_MAP_XFER_FUNC_DEFAULT(fmt->colorspace);
+	fmt->width = m30_mode_data[M30_DEFAULT_MODE].width;
+	fmt->height = m30_mode_data[M30_DEFAULT_MODE].height;
+	fmt->field = V4L2_FIELD_NONE;
+	sensor->frame_interval.numerator = 1;
+	sensor->frame_interval.denominator = m30_frame_rates[m30_mode_data[M30_DEFAULT_MODE].fps];
+	sensor->current_mode = &m30_mode_data[M30_DEFAULT_MODE];
+	sensor->last_mode = sensor->current_mode;
+
+	endpoint = fwnode_graph_get_next_endpoint(dev_fwnode(&client->dev),
+						  NULL);
+	if (!endpoint) {
+		dev_err(dev, "endpoint node not found\n");
+		return -EINVAL;
+	}
+
+	ret = v4l2_fwnode_endpoint_parse(endpoint, &sensor->ep);
+	fwnode_handle_put(endpoint);
+	if (ret) {
+		dev_err(dev, "Could not parse endpoint\n");
+		return ret;
+	}
+
+	if (sensor->ep.bus_type != V4L2_MBUS_CSI2_DPHY) {
+		dev_err(dev, "Unsupported bus type %d\n", sensor->ep.bus_type);
+		return -EINVAL;
+	}
+
+	v4l2_i2c_subdev_init(&sensor->sd, client, &m30_subdev_ops);
+
+	sensor->sd.flags |= V4L2_SUBDEV_FL_HAS_EVENTS;
+	sensor->pad.flags = MEDIA_PAD_FL_SOURCE;
+	sensor->sd.entity.ops = &m30_sd_media_ops;
+	sensor->sd.entity.function = MEDIA_ENT_F_CAM_SENSOR;
+	ret = media_entity_pads_init(&sensor->sd.entity, 1, &sensor->pad);
+	if (ret)
+		return ret;
+
+	mutex_init(&sensor->lock);
+
+	ret = v4l2_async_register_subdev_sensor(&sensor->sd);
+	if (ret)
+		goto entity_cleanup;
+
+	dev_info(dev, "probe_successful\n");
+	return 0;
+
+entity_cleanup:
+	media_entity_cleanup(&sensor->sd.entity); // This doesn't seem to do anything
+	mutex_destroy(&sensor->lock);
+	return ret;
+}
+
+static int m30_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct m30_dev *sensor = to_m30_dev(sd);
+
+	printk("%s\n", __func__);
+	v4l2_async_unregister_subdev(&sensor->sd);
+	media_entity_cleanup(&sensor->sd.entity);
+	mutex_destroy(&sensor->lock);
+
+	return 0;
+}
+
+static const struct i2c_device_id m30_id[] = {
+	{"m30", 0},
+	{},
+};
+MODULE_DEVICE_TABLE(i2c, m30_id);
+
+static const struct of_device_id m30_dt_ids[] = {
+	{ .compatible = "lumotive,m30" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, m30_dt_ids);
+
+static struct i2c_driver m30_i2c_driver = {
+	.driver = {
+		.name  = "m30",
+		.of_match_table	= m30_dt_ids,
+	},
+	.id_table = m30_id,
+	.probe_new = m30_probe,
+	.remove   = m30_remove,
+};
+
+module_i2c_driver(m30_i2c_driver);
+
+MODULE_DESCRIPTION("Lumotive M30 MIPI Camera Subdev Driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/staging/media/imx/imx8-isi-cap.c b/drivers/staging/media/imx/imx8-isi-cap.c
index 6f83ba47f919..132bfdb1be62 100644
--- a/drivers/staging/media/imx/imx8-isi-cap.c
+++ b/drivers/staging/media/imx/imx8-isi-cap.c
@@ -884,7 +884,8 @@ static int mxc_isi_cap_try_fmt_mplane(struct file *file, void *fh,
 	 * 16(128/8)
 	 */
 	v4l_bound_align_image(&pix->width, 16, ISI_4K, fmt->align,
-			      &pix->height, 16, ISI_4K, 1, 0);
+			      &pix->height, 8, ISI_4K, 0, 0);
+//			      &pix->height, 16, ISI_4K, 1, 0); // Appears that there's no hardware limitation to force 2 byte alignment
 
 	pix->num_planes = fmt->memplanes;
 	pix->pixelformat = fmt->fourcc;
@@ -948,7 +949,7 @@ static int mxc_isi_source_fmt_init(struct mxc_isi_cap_dev *isi_cap)
 
 	src_fmt.pad = source_pad->index;
 	src_fmt.which = V4L2_SUBDEV_FORMAT_ACTIVE;
-	src_fmt.format.code = MEDIA_BUS_FMT_UYVY8_2X8;
+	src_fmt.format.code = MEDIA_BUS_FMT_BGR888_1X24;
 	src_fmt.format.width = dst_f->width;
 	src_fmt.format.height = dst_f->height;
 	ret = v4l2_subdev_call(src_sd, pad, set_fmt, NULL, &src_fmt);
diff --git a/drivers/staging/media/imx/imx8-mipi-csi2.c b/drivers/staging/media/imx/imx8-mipi-csi2.c
index 3c628fb1becd..901af57adff8 100644
--- a/drivers/staging/media/imx/imx8-mipi-csi2.c
+++ b/drivers/staging/media/imx/imx8-mipi-csi2.c
@@ -377,6 +377,7 @@ static int calc_hs_settle(struct mxc_mipi_csi2_dev *csi2dev, u32 dphy_clk)
 	u32 rxhs_settle;
 	u32 hs_settle_min;
 	u32 hs_settle_max;
+	struct device *dev = &csi2dev->pdev->dev;
 
 	esc_rate = clk_get_rate(csi2dev->clk_esc) / 1000000;
 	if (!esc_rate)
@@ -386,6 +387,7 @@ static int calc_hs_settle(struct mxc_mipi_csi2_dev *csi2dev, u32 dphy_clk)
 	hs_settle_max = 145 + 10 * 1000 / dphy_clk;
 	hs_settle = (hs_settle_min + hs_settle_max) >> 1;
 	rxhs_settle = hs_settle / (1000 / esc_rate) - 1;
+	dev_info(dev, "esc_rate=%u,hs_settle=%u,%u,%u,rxhs_settle=%u\n", esc_rate, hs_settle_min, hs_settle, hs_settle_max, rxhs_settle);
 	return rxhs_settle;
 }
 
@@ -433,10 +435,10 @@ static void mxc_mipi_csi2_reg_dump(struct mxc_mipi_csi2_dev *csi2dev)
 	};
 	u32 i;
 
-	dev_dbg(dev, "MIPI CSI2 CSR and HC register dump, mipi csi%d\n", csi2dev->id);
+	dev_warn(dev, "MIPI CSI2 CSR and HC register dump, mipi csi%d\n", csi2dev->id);
 	for (i = 0; i < ARRAY_SIZE(registers); i++) {
 		u32 reg = readl(csi2dev->base_regs + registers[i].offset);
-		dev_dbg(dev, "%20s[0x%.3x]: 0x%.3x\n",
+		dev_warn(dev, "%20s[0x%.3x]: 0x%.3x\n",
 			registers[i].name, registers[i].offset, reg);
 	}
 }
@@ -659,7 +661,7 @@ static int mxc_csi2_get_sensor_fmt(struct mxc_mipi_csi2_dev *csi2dev)
 	/* Update input frame size and formate  */
 	memcpy(mf, &src_fmt.format, sizeof(struct v4l2_mbus_framefmt));
 
-	dev_dbg(&csi2dev->pdev->dev, "width=%d, height=%d, fmt.code=0x%x\n",
+	dev_warn(&csi2dev->pdev->dev, "width=%d, height=%d, fmt.code=0x%x\n",
 		mf->width, mf->height, mf->code);
 
 	/* Get rxhs settle */
@@ -1089,8 +1091,10 @@ static int mipi_csi2_s_stream(struct v4l2_subdev *sd, int enable)
 			mxc_mipi_csi2_reg_dump(csi2dev);
 		}
 	} else {
-		if (!--csi2dev->running)
+		if (!--csi2dev->running) {
+			mxc_mipi_csi2_reg_dump(csi2dev);
 			mxc_mipi_csi2_disable(csi2dev);
+		}
 
 		pm_runtime_put(dev);
 	}
-- 
2.25.1

